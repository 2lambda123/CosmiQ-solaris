################################################################################
################# SOLARIS MODEL CONFIGURATION SKELETON #########################
################################################################################

# This skeleton lays out the required instructions for running a model using
# solaris. See the full documentation at [INCLUDE DOC LINK HERE] for details on
# options, required arguments, and sample usage.

model_name: xdxd_spacenet4

model_path: # leave this blank unless you're using a custom model not
                # native to solaris. solaris will automatically find your
                # model.
train: true  # set to false for inference only
infer: false  # set to false for training only

pretrained: false  # use pretrained weights associated with the model?
nn_framework:  torch
batch_size: 4

data_specs:
  width: 512
  height:  512
  image_type: zscore # format of images read into the neural net. options
                     # are 'normalized', 'zscore', '8bit', '16bit'.
  rescale: false  # should image pixel values be rescaled before pre-processing?
                  # If so, the image will be rescaled to the pixel range defined
                  # by rescale_min and rescale_max below.
  rescale_minima: auto  # the minimum values to use in rescaling (if
                        # rescale=true). If 'auto', the minimum pixel intensity
                        # in each channel of the image will be subtracted. If
                        # a single value is provided, that value will be set to
                        # zero for each channel in the input image.
                        # if a list of values are provided, then minima in the
                        # separate channels (in that order) will be set to that
                        # value PRIOR to any augmentation.
  rescale_maxima: auto  # same as rescale_minima, but for the maximum value for
                        # each channel in the image.
  channels: 4 # number of channels in the input imagery.
  label_type: mask  # one of ['mask', 'bbox']
  is_categorical: false  # are the labels binary (default) or categorical?
  mask_channels: 1  # number of channels in the training mask
  val_holdout_frac:  # if empty, assumes that separate data ref files define the
                     # training and validation dataset. If a float between 0 and
                     # 1, indicates the fraction of training data that's held
                     # out for validation (and validation_data_csv will be
                     # ignored)
  data_workers:  # number of cpu threads to use for loading and preprocessing
                 # input images.
#  other_inputs:  # this can provide a list of additional inputs to pass to the
                 # neural net for training. These inputs should be specified in
                 # extra columns of the csv files (denoted below), either as
                 # filepaths to additional data to load or as values to include.
                 # NOTE: This is not currently implemented.
training_data_csv: # TODO # path to the reference csv that defines training data.
                    # see the documentation for the specifications of this file.
validation_data_csv: # TODO # path to the validation ref csv. See the docs. If
                      # val_holdout_frac is specified (under data_specs), then
                      # this argument will be ignored.
inference_data_csv: # TODO # path to the reference csv that defines inference data.
                     # see the documentation for the specs of this file.

training_augmentation:  # augmentations for use with training data
  augmentations:
    DropChannel:
      idx: 3
      axis: 2
    HorizontalFlip:
      p: 0.5
    RandomRotate90:
      p: 0.5
    RandomCrop:
      height: 512
      width: 512
      p: 1.0
    Normalize:
      mean:  # mean values after dividing by max pixel value
        - 0.006479
        - 0.009328
        - 0.01123
      std:  # std after dividing by max pixel value
        - 0.004986
        - 0.004964
        - 0.004950
      p: 1.0
      max_pixel_value: 65535.0
  p: 1.0  # probability of applying the entire training augmentation pipeline.
  shuffle: true  # should the image order be shuffled in each epoch.
validation_augmentation:  # augmentations for use with validation data
  augmentations:
    CenterCrop:
      height: 512
      width: 512
      p: 1.0
    Normalize:
      p: 1.0
    # include augmentations here
  p: 1.0 # probability of applying the full validation augmentation pipeline.
inference_augmentation:  # this is optional. If not provided,
                         # validation_augmentation will be used instead.

training:
  epochs:  50 # number of epochs. A list can also be provided here indicating
           # distinct sets of epochs at different learning rates, etc; if so,
           # a list of equal length must be provided in the parameter that varies
           # with the values for each set of epochs.
  steps_per_epoch:  # optional argument defining # steps/epoch. If not provided,
                    # each epoch will include the number of steps needed to go
                    # through the entire training dataset.
  optimizer: Adam # optimizer function name. see docs for options.
  lr: 1e-4 # learning rate.
  opt_args:  # dictionary of values (e.g. alpha, gamma, momentum) specific to
             # the optimizer.
  loss:
    bcewithlogits:
    jaccard:

  loss_weights:
    - bcewithlogits: 1  # (optional) weights to use for each loss function if using
    - jaccard: 0.25 # loss: composite. This must be a set of key:value pairs where
                 # defining the weight for each sub-loss within the composite.
                 # If using a composite and a value isn't provided here, all
                 # losses will be weighted equally.
  metrics:  # metrics to monitor on the training and validation sets.
    training:      # training set metrics.
      - f1_score
      - recall
      - precision

    validation:  # validation set metrics.
      - f1_score
      - recall
      - precision
  checkpoint_frequency: 10 # how frequently should checkpoints be saved?
                         # this can be an int, in which case every n epochs
                         # a checkpoint will be made, or a list, in which case
                         # checkpoints will be saved on those specific epochs.
                         # if not provided, only the final model is saved.
  callbacks:
    model_checkpoint:
      filepath: 'xdxd_sn4_best.pth'
      monitor: val_loss
  model_dest_path: 'xdxd_sn4.pth'  # path to save the trained model output and checkpoint(s)
                     # to. Should be a filename ending in .h5, .hdf5 for keras
                     # or .pth, .pt for torch. Epoch numbers will be appended
                     # for checkpoints.
  verbose: true  # verbose text output during training

inference:
  window_step_size_x:  # size of each step for the sliding window for inference.
                       # set to the same size as the input image size for zero
                       # overlap; to average predictions across multiple images,
                       # use a smaller step size.
  window_step_size_y:  # size of each step for the sliding window for inference.
                       # set to the same size as the input image size for zero
                       # overlap; to average predictions across multiple images,
                       # use a smaller step size.
